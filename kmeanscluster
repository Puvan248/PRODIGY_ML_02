import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# Load the dataset
df = pd.read_csv('customer_data.csv')

# Display the first few rows of the dataset to understand its structure
print(df.head())

# Assuming the dataset has columns like 'CustomerID', 'AnnualIncome', 'SpendingScore', etc.
# Select relevant columns for clustering, e.g., 'AnnualIncome' and 'SpendingScore'
X = df[['AnnualIncome', 'SpendingScore']].values

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Initialize a list to store inertia values
inertia = []

# Try different values of K from 1 to 10
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=0)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), inertia, marker='o', linestyle='--')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K')
plt.grid(True)
plt.show()
# Choose the optimal number of clusters based on the Elbow Method (e.g., K=5)
k = 5

# Train the K-means model
kmeans = KMeans(n_clusters=k, random_state=0)
clusters = kmeans.fit_predict(X_scaled)

# Add the cluster labels to the original DataFrame
df['Cluster'] = clusters
# Visualize the clusters
plt.figure(figsize=(10, 8))
for i in range(k):
    plt.scatter(X_scaled[clusters == i, 0], X_scaled[clusters == i, 1], label=f'Cluster {i}', alpha=0.7)

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroids')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (scaled)')
plt.ylabel('Spending Score (scaled)')
plt.legend()
plt.grid(True)
plt.show()
import joblib

# Save the model to disk
joblib.dump(kmeans, 'customer_segmentation_model.pkl')

# Later, load the model from disk
# loaded_model = joblib.load('customer_segmentation_model.pkl')
